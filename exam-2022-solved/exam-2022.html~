<!DOCTYPE html>
<!-- saved from url=(0022)http://localhost:6419/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

  <title>exam-2022.md - Grip</title>
  <link rel="icon" href="http://localhost:6419/__/grip/static/favicon.ico">
  <link rel="stylesheet" href="./exam-2022_files/dark_colorblind-bc6bf4eea850.css">
  <link rel="stylesheet" href="./exam-2022_files/code-78c29c966d84.css">
  <link rel="stylesheet" href="./exam-2022_files/light-719f1193e0c0.css">
  <link rel="stylesheet" href="./exam-2022_files/dark-0c343b529849.css">
  <link rel="stylesheet" href="./exam-2022_files/light_colorblind-527658dec362.css">
  <link rel="stylesheet" href="./exam-2022_files/dark_high_contrast-188ef1de59e6.css">
  <link rel="stylesheet" href="./exam-2022_files/primer-e357a4095c32.css">
  <link rel="stylesheet" href="./exam-2022_files/light_high_contrast-c7a7fe0cd8ec.css">
  <link rel="stylesheet" href="./exam-2022_files/github-7cfc9d43e891.css">
  <link rel="stylesheet" href="./exam-2022_files/global-db31090e8b9a.css">
  <link rel="stylesheet" href="./exam-2022_files/dark_dimmed-f22da508b62a.css">
  <link rel="stylesheet" href="./exam-2022_files/light_tritanopia-6aa855bdae0f.css">
  <link rel="stylesheet" href="./exam-2022_files/dark_tritanopia-6aa5e25aacc0.css">
  <link rel="stylesheet" href="./exam-2022_files/octicons.css">
  <style>
    /* Page tweaks */
    .preview-page {
      margin-top: 64px;
      margin-bottom: 21px;
    }
    /* User-content tweaks */
    .timeline-comment-wrapper > .timeline-comment:after,
    .timeline-comment-wrapper > .timeline-comment:before {
      content: none;
    }
    /* User-content overrides */
    .discussion-timeline.wide {
      width: 920px;
    }
  </style>
</head>
<body>
  <div class="page">
    <div id="preview-page" class="preview-page" data-autorefresh-url="/__/grip/refresh/">

          <div role="main" class="main-content">
        <div class="container new-discussion-timeline experiment-repo-nav">
          <div class="repository-content">
            <div id="readme" class="readme boxed-group clearfix announce instapaper_body md">

                      <article id="grip-content" class="markdown-body entry-content container-lg">
                        <h1><a id="user-content-webdev1-final-exam---january-2022" class="anchor" aria-hidden="true" href="http://localhost:6419/#webdev1-final-exam---january-2022"><span aria-hidden="true" class="octicon octicon-link"></span></a>WebDev1 Exam 2022</h1>
<p><strong>Note:</strong> The following questions will be shown in random order in the exam.
In this document you will find them grouped by thematic areas, to better help you prepare the exam.</p>
<h2><a id="user-content-general-questions" class="anchor" aria-hidden="true" href="http://localhost:6419/#general-questions"><span aria-hidden="true" class="octicon octicon-link"></span></a>General questions</h2>
<p><strong>Is <code>http://example.html.com</code> a valid URL?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> No, because "html" can only be used as a file extension.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> No, because the protocol should be "https" instead of "http".</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Yes, because it uses a valid protocol followed by a valid domain name.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Yes, because we can use any format or characters in a URL.</li>
</ul>
<p><strong>Sort the following events by chronological order:</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Browser renders page, DNS resolves domain, server transfers page, browser requests page.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> DNS resolves domain, browser requests page, server transfers page, browser renders page.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Browser requests page, DNS resolves domain, server transfers page, browser renders page.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Browser requests page, DNS resolves domain, browser renders page, server transfers page.</li>
</ul>
<p><strong>What do we mean by progressive enhancement?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> HTML comes first and everything else is optional.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> CSS comes first and everything else is optional.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> JS comes first and everything else is optional.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> It is a usability evaluation technique.</li>
</ul>
<p><strong>Which of the following statements is correct?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Raster images are represented as a matrix of pixels.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Vector images are represented as mathematical equations.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Vector images are independent of screen resolution.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> All statements are correct.</li>
</ul>
<p><strong>What is the difference between URNs and URLs?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> URLs identify resource names, whereas URNs identify how to access resources.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> URNs identify resource names, whereas URLs identify how to access resources.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> URLs are a subset of URNs.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> URNs are a subset of URLs.</li>
</ul>
<h2><a id="user-content-html-questions" class="anchor" aria-hidden="true" href="http://localhost:6419/#html-questions"><span aria-hidden="true" class="octicon octicon-link"></span></a>HTML questions</h2>
<p><strong>What do browsers ignore?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Multiple white spaces, tabs, and line breaks.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Unrecognized markup.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> All of these.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> None of these.</li>
</ul>
<p><strong>One key difference between XML and HTML is that ...</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> ... HTML is case-sensitive but XML is case-insensitive.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> ... XML is case-sensitive but HTML is case-insensitive.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> ... XML is an object-oriented markup language but HTML is not.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> ... HTML is a object-oriented markup language but XML is not.</li>
</ul>
<p><strong>Should empty elements be closed explicitly in HTML5? For example, <code>&lt;br&gt;</code> vs <code>&lt;br/&gt;</code>.</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> It is not required and in fact it is considered a bad practice.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> It is always required and so it is a good practice.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> It is not required but it is a good practice to do so.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> It is always required but it is considered a bad practice.</li>
</ul>
<p><strong>How can we write escaping sequences in HTML?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>&amp; + word (named entity) + ;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>&amp;# + decimal number + ;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>&amp;#x + hexadecimal number + ;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> All of these.</li>
</ul>
<p><strong>How would you include a stylesheet as an external file?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;link src="file.css" ... /&gt;</code> in the HEAD.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;link href="file.css" ... /&gt;</code> in the BODY.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Using <code>&lt;link href="file.css" ... /&gt;</code> in the HEAD.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;link src="file.css" ... /&gt;</code> in the BODY.</li>
</ul>
<p><strong>What does the <code>&lt;ul&gt;</code> tag do?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Creates an ordered list of items.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Creates an unordered list of items.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Creates a definition list of items.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> All of these.</li>
</ul>
<p><strong>How would you create a hyperlink to <code>doc.html</code> in <code>page.html</code>?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;link href="doc.html"&gt; ... &lt;/link&gt;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;a src="doc.html"&gt; ... &lt;/a&gt;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Using <code>&lt;a href="doc.html"&gt; ... &lt;/a&gt;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;link src="doc.html"&gt; ... &lt;/link&gt;</code>
</li>
</ul>
<p><strong>How would you create a dropdown menu?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;select multiple&gt;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Using <code>&lt;select&gt;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;input type="select"&gt;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Using <code>&lt;input type="dropdown"&gt;</code>
</li>
</ul>
<h2><a id="user-content-css-questions" class="anchor" aria-hidden="true" href="http://localhost:6419/#css-questions"><span aria-hidden="true" class="octicon octicon-link"></span></a>CSS questions</h2>
<p><strong>What is the purpose of a CSS reset stylesheet?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> To reduce browsers' rendering inconsistencies.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> To encourage browsers' rendering inconsistencies.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> To improve the usability of a website.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> To improve the accessibility of a website.</li>
</ul>
<p><strong>What will be the effective width of the following DIV?</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="./exam-2022_files/css-div-width-border-box.png"><img src="./exam-2022_files/css-div-width-border-box.png" alt="Snippet" width="700" style="max-width: 100%;"></a></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 100px</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 120px</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 140px</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 80px</li>
</ul>
<p><strong>What color will have all paragraphs based on the following style declarations?</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="./exam-2022_files/css-p-color-styles.png"><img src="./exam-2022_files/css-p-color-styles.png" alt="Snippet" width="700" style="max-width: 100%;"></a></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Red</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Green</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Gray (default)</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Black (default)</li>
</ul>
<p><strong>Sort the following CSS selectors from lower to higher priority:</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Individual selectors, class selectors, ID selectors, contextual selectors.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Individual selectors, contextual selectors, class selectors, ID selectors.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Individual selectors, ID selectors, contextual selectors, class selectors.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> ID selectors, class selectors, contextual selectors, individual selectors.</li>
</ul>
<p><strong>How would you match all hyperlinks that end with <code>.asp</code> in CSS?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> With <code>a[href ^= ".asp"]</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> With <code>a[href |= ".asp"]</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> With <code>a[href ~= ".asp"]</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> With <code>a[href $= ".asp"]</code>
</li>
</ul>
<p><strong>What does <code>padding: 4px 8px;</code> do in CSS?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Sets the left and right padding to 4px and 8px, respectively.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Sets the top and bottom padding to 4px and 8px, respectively.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Sets the top and bottom padding to 4px and the left and right padding to 8px.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Sets the left and right padding to 4px and the top and bottom padding to 8px.</li>
</ul>
<p><strong>Which of the following CSS declarations will add a dashed border?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>border-type: dashed;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>border-decoration: dashed;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> <code>border-style: dashed;</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>border-thickness: dashed;</code>
</li>
</ul>
<h2><a id="user-content-javascript-questions" class="anchor" aria-hidden="true" href="http://localhost:6419/#javascript-questions"><span aria-hidden="true" class="octicon octicon-link"></span></a>JavaScript questions</h2>
<p><strong>What is the output of this JS program?</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="./exam-2022_files/js-array-push.png"><img src="./exam-2022_files/js-array-push.png" alt="Snippet" width="700" style="max-width: 100%;"></a></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>[1,2,3]</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>[3,1,2]</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> <code>[1,2]</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> This program does not run.</li>
</ul>
<p><strong>What is the output of this JS program?</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="./exam-2022_files/js-greet-var.png"><img src="./exam-2022_files/js-greet-var.png" alt="Snippet" width="700" style="max-width: 100%;"></a></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Hello there!</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Hello ${greet}</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Hello greet</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> This program does not run.</li>
</ul>
<p><strong>What is the result of <code>"6" + "2"</code> in JS?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>8</code> because both strings are converted to numbers before the sum operation.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>62</code> because JS concatenates both strings and then converts the result to <code>Number</code>.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> <code>"62"</code> because the sum operation over two strings will concatenate them.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> This operation will throw a <code>SumError</code> in JS.</li>
</ul>
<p><strong>What is the output of this JS program?</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="./exam-2022_files/js-hello-sayhi.png"><img src="./exam-2022_files/js-hello-sayhi.png" alt="Snippet" width="700" style="max-width: 100%;"></a></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Hello you</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> undefined</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Hello undefined</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> This program does not run.</li>
</ul>
<p><strong>Why <code>1 &amp;&amp; alert("Hi")</code> displays a dialog with the word <code>Hi</code>?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Because JS is a very permissive programming language.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Because <code>1</code> is a truthy value so the rightmost statement is executed.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Because this is a design error in the language.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> This does not display anything.</li>
</ul>
<p><strong>What is the output of this JS program?</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="./exam-2022_files/js-constructor.png"><img src="./exam-2022_files/js-constructor.png" alt="Snippet" width="700" style="max-width: 100%;"></a></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>"Jack"</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> <code>{name: "Jack"}</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>undefined</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> This program does not run.</li>
</ul>
<p><strong>What is the output of this JS program? Assume that <code>/file.json</code> exists.</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="./exam-2022_files/js-xhr-json.png"><img src="./exam-2022_files/js-xhr-json.png" alt="Snippet" width="700" style="max-width: 100%;"></a></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>string</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> <code>object</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>undefined</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> This program does not run.</li>
</ul>
<p><strong>Sort the following mouse events by chronological order:</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> mouseover, mousedown, click, mouseup</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> mouseover, click, mousedown, mouseup</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> mouseover, mousedown, mouseup, click</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> mousedown, mouseover, click, mouseup</li>
</ul>
<p><strong>Why is event delegation useful in JS?</strong></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> It is not performance-friendly but we save coding time by defining a catch-all event handler instead of lots of individual handlers.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> It is performance-friendly because we use a catch-all event handler instead of defining lots of individual handlers.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> It is better for improving the accessibility of our web application because it will delegate all handlers.</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> Event delegation is never useful in JS and should be avoided at all times.</li>
</ul>
<p><strong>If you open this HTML file with a web browser, What would you see in the output console?</strong></p>
<p><a target="_blank" rel="noopener noreferrer" href="./exam-2022_files/html-queryselector-in-head.png"><img src="./exam-2022_files/html-queryselector-in-head.png" alt="Snippet" width="700" style="max-width: 100%;"></a></p>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> <code>1</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>2</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> <code>undefined</code>
</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> This code creates an infinite loop.</li>
</ul>

                      </article>
                    </div>
                  </div>



              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
  </div><script>
    function showCanonicalImages() {
      var images = document.getElementsByTagName('img');
      if (!images) {
        return;
      }
      for (var index = 0; index < images.length; index++) {
        var image = images[index];
        if (image.getAttribute('data-canonical-src') && image.src !== image.getAttribute('data-canonical-src')) {
          image.src = image.getAttribute('data-canonical-src');
        }
      }
    }

    function scrollToHash() {
      if (location.hash && !document.querySelector(':target')) {
        var element = document.getElementById('user-content-' + location.hash.slice(1));
        if (element) {
           element.scrollIntoView();
        }
      }
    }

    function autorefreshContent(eventSourceUrl) {
      var initialTitle = document.title;
      var contentElement = document.getElementById('grip-content');
      var source = new EventSource(eventSourceUrl);
      var isRendering = false;

      source.onmessage = function(ev) {
        var msg = JSON.parse(ev.data);
        if (msg.updating) {
          isRendering = true;
          document.title = '(Rendering) ' + document.title;
        } else {
          isRendering = false;
          document.title = initialTitle;
          contentElement.innerHTML = msg.content;
          showCanonicalImages();
        }
      }

      source.onerror = function(e) {
        if (e.readyState === EventSource.CLOSED && isRendering) {
          isRendering = false;
          document.title = initialTitle;
        }
      }
    }

    window.onhashchange = function() {
      scrollToHash();
    }

    window.onload = function() {
      scrollToHash();
    }

    showCanonicalImages();

    var autorefreshUrl = document.getElementById('preview-page').getAttribute('data-autorefresh-url');
    if (autorefreshUrl) {
      autorefreshContent(autorefreshUrl);
    }
  </script>

</body></html>
